/**
 * You are given two non-empty linked lists representing two non-negative integers. The digits are
 * stored in reverse order and each of their nodes contain a single digit. Add the two numbers and
 * return it as a linked list.
 *
 * You may assume the two numbers do not contain any leading zero, except the number 0 itself.
 *
 * Example:
 *
 * Input: (2 -> 4 -> 3) + (5 -> 6 -> 4) Output: 7 -> 0 -> 8 Explanation: 342 + 465 = 807.
 */

/**
 * Definition for singly-linked list. public class ListNode { int val; ListNode next; ListNode(int
 * x) { val = x; } }
 */
//medium
public class Leetcode2 {

  public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    ListNode head = new ListNode(-1);
    ListNode curt = head;
    int carry = 0;
    while (l1 != null || l2 != null) {
      int x = l1 == null ? 0 : l1.val;
      int y = l2 == null ? 0 : l2.val;
      int sum = x + y + carry;
      carry = sum / 10;
      curt.next = new ListNode(sum % 10);
      curt = curt.next;
      if (l1 != null) {
        l1 = l1.next;
      }
      if (l2 != null) {
        l2 = l2.next;
      }
    }

    if (carry != 0) {
      curt.next = new ListNode(1);
    }
    return head.next;
  }
}


class ListNode {

  int val;
  ListNode next;

  ListNode(int x) {
    val = x;
  }
}

/**
 Success
 Details
 Runtime: 1 ms, faster than 99.99% of Java online submissions for Add Two Numbers.
 Memory Usage: 44.1 MB, less than 86.83% of Java online submissions for Add Two Numbers.
 */